import { createAsyncThunk, createSlice, PayloadAction } from '@reduxjs/toolkit';
import {ofType} from "redux-observable";
import {delay, mapTo, tap} from "rxjs";
import { RootState, AppThunk } from './store';
import { fetchCount } from './counterAPI';

export type pingValues = 'PING' | 'PONG'
const delayTime = 1000
export interface CounterState {
    counterValue: number;
    status: 'idle' | 'loading' | 'failed';
    pingValue: pingValues,
    isStarted: boolean,
    count: number
}

const initialState: CounterState = {
    counterValue: 0,
    status: 'idle',
    pingValue:"PING",
    isStarted:false,
    count:0
};

// The function below is called a thunk and allows us to perform async logic. It
// can be dispatched like a regular action: `dispatch(incrementAsync(10))`. This
// will call the thunk with the `dispatch` function as the first argument. Async
// code can then be executed and other actions can be dispatched. Thunks are
// typically used to make async requests.
export const incrementAsync = createAsyncThunk(
    'counter/fetchCount',
    async (amount: number) => {
        const response = await fetchCount(amount);
        // The value we return becomes the `fulfilled` action payload
        return response.data;
    }
);

export const counterSlice = createSlice({
    name: 'counter',
    initialState,
    // The `reducers` field lets us define reducers and generate associated actions
    reducers: {
        increment: (state) => {
            // Redux Toolkit allows us to write "mutating" logic in reducers. It
            // doesn't actually mutate the state because it uses the Immer library,
            // which detects changes to a "draft state" and produces a brand new
            // immutable state based off those changes
            state.counterValue += 1;
        },
        decrement: (state) => {
            state.counterValue -= 1;
        },
        // Use the PayloadAction type to declare the contents of `action.payload`
        incrementByAmount: (state, action: PayloadAction<number>) => {
            state.counterValue += action.payload;
        },
        setPing: (state => {
            state.pingValue = 'PING'
            state.isStarted = true
            state.count++;
        }),
        setPong: (state => {
            state.pingValue = 'PONG';
            state.isStarted = true;
            state.count++;
        })
    },
    // The `extraReducers` field lets the slice handle actions defined elsewhere,
    // including actions generated by createAsyncThunk or in other slices.
    extraReducers: (builder) => {
        builder
            .addCase(incrementAsync.pending, (state) => {
                state.status = 'loading';
            })
            .addCase(incrementAsync.fulfilled, (state, action) => {
                state.status = 'idle';
                state.counterValue += action.payload;
            })
            .addCase(incrementAsync.rejected, (state, action) =>{
                state.status = 'failed'
            });
    },
});

export const { increment, decrement, incrementByAmount } = counterSlice.actions;

// The function below is called a selector and allows us to select a value from
// the state. Selectors can also be defined inline where they're used instead of
// in the slice file. For example: `useSelector((state: RootState) => state.counter.value)`
export const selectCount = (state: RootState) => state.counterSlice.counterValue;

// We can also write thunks by hand, which may contain both sync and async logic.
// Here's an example of conditionally dispatching actions based on current state.
export const incrementIfOdd = (amount: number): AppThunk => (
    dispatch,
    getState
) => {
    const currentValue = selectCount(getState());
    if (currentValue % 2 === 1) {
        dispatch(incrementByAmount(amount));
    }
};

// Examples of using RXJS to listen for actions and asynchronously yield other actions
export const pingEpic = (action$: any, state: any) => action$.pipe(
    ofType(setPing), // Pulling out the string 'ping/setPing' from the action creator 
    tap(()=>console.log(`ping state:`), state),
    delay(delayTime),// Asynchronously wait 1000ms then continue
    mapTo(setPong()) // here we're executing the action creator to create an action Type 'plain old javascript object' 
);

export const pongEpic = (action$: any, state:any) => action$.pipe(
    ofType(setPong),
    tap(()=>console.log(`pong state:`, state)),
    delay(delayTime),
    mapTo(setPing())
);

export const {setPing, setPong} = counterSlice.actions;
export const epics = [pingEpic, pongEpic]
export default counterSlice.reducer;
